#include<stdio.h>
#include<stdlib.h>
#define STRING_MAX_LENGHT (1024)
typedef struct _cvor* Position;
typedef struct _cvor {
	int element;
	Position next;
}Cvor;

int ReadListFromFile(Position lista);
int PrintList(Position lista);
int Unija(Position prvaLista, Position drugaLista, Position unija);
int Presjek(Position prvaLista, Position drugaLista, Position presjek);

int main(int argc,char *argv[]) {
	Cvor prvaLista;
	Cvor drugaLista;
	Cvor unija;
	Cvor presjek;

	prvaLista.next = NULL;
	drugaLista.next = NULL;
	unija.next = NULL;
	presjek.next = NULL;

	ReadListFromFile(&prvaLista);
	ReadListFromFile(&drugaLista);

	printf("\r\nLista L1: \r\n");
	PrintList(prvaLista.next);

	printf("\r\nLista L2: \r\n");
	PrintList(drugaLista.next);

	Unija(prvaLista.next, drugaLista.next, &unija);
	printf("\r\nUnija L1 i L2: \r\n");
	PrintList(unija.next);

	Presjek(prvaLista.next, drugaLista.next, presjek.next);
	printf("\r\nPresjek L1 i L2: \r\n");
	PrintList(presjek.next);

	printf("\r\n");
}
int ReadListFromFile(Position lista) {
	FILE *fp;
	char fileName[STRING_MAX_LENGHT];
	Position temp, newItem;
	printf("\r\nUnesite naziv datoteke za citanje: \r\n");
	scanf(" %s", fileName);
	fp = fopen(fileName, "r");
	if (fp == NULL)
		printf("\r\nDoslo je do greske prilikom otvaranja datoteke <%s>!\r\n",fileName);
	else
	{
		while (!feof(fp))
		{
			newItem = (Position)malloc(sizeof(Cvor));
			if (newItem == NULL)
				printf("\r\nDoslo je do greske prilikom alokacije memorije!\r\n");
			else
			{
				fscanf(fp, " %d", &newItem->element); //ucitaj element u newItem
				temp = lista;
				while (temp->next != NULL && temp->next->element < newItem->element) //dok nije kraj liste i dok je element veci od trenutno procitanog elementa
					temp = temp->next; //iduci element
				newItem->next = temp->next; //ubacivanje novog elementa
				temp->next = newItem;
			}
		}
		fclose(fp);
	}
	return 0;
}
int PrintList(Position lista) {
	while (lista!=NULL)
	{
		printf("%d ", lista->element);
		lista = lista->next;
	}
	printf("\r\n");
	return 0;
}
int Unija(Position prvaLista, Position drugaLista, Position unija) {
	Position newItem, temp;
	int tempElement;

	while (prvaLista->next!=NULL && drugaLista->next!=NULL) //dok nije kraj prve ni druge liste
	{
		if (prvaLista->element>drugaLista->element)
		{
			tempElement = prvaLista->element; //spremamo u temp element prve liste ako je veci od elementa druge liste
			prvaLista = prvaLista->next; //iduci element druge liste
		}
		else if (prvaLista->element<drugaLista->element)
		{
			tempElement = drugaLista->element; //spremamo u temp element druge liste ako je veci od elementa prve liste
			drugaLista = drugaLista->next; //iduci element druge liste
		}
		else
		{
			tempElement = prvaLista->element; //spremamo element prve liste u temp
			prvaLista = prvaLista->next; //iduci element prve liste
			drugaLista = drugaLista->next; //iduci element druge liste
		}

		newItem = (Position)malloc(sizeof(Cvor));
		if (newItem == NULL)
			printf("\r\nDoslo je do greske prilikom alokacije memorije!\r\n");
		else
		{
			newItem->element = tempElement; //tempElement spremamo u novi element

			newItem->next = unija->next; //dodavanje novog elementa
			unija->next = newItem;

			unija = newItem;
		}
	}

	if (prvaLista == NULL)
		temp = drugaLista;
	else
		temp = prvaLista;

	while (temp!=NULL)
	{
		newItem->element = temp->element;

		newItem->next = unija->next;
		unija->next = newItem;

		unija = newItem;
		temp = temp->next;
	}
	return 0;
}
int Presjek(Position prvaLista, Position drugaLista, Position presjek) {

	return 0;
}
